import re
import math
from AsmValues import AsmValues
from collections import OrderedDict

class Processor:
    filters = ['add', 'and', 'call', 'cmp', 'dec', 'inc', 'ja', 'jb', 'jbe', 'je', 'jg', 'jmp', 'jnb', 'jne', 'jno', 'jnp', 'jnz', 'jo', 'jp', 'jz', 'lea', 'mov', 'mul', 'nop', 'not', 'or', 'pop', 'push', 'pushf', 'ret', 'retn', 'shld', 'sub', 'test', 'xchg', 'xor']
    def count_file(fileName):
        asmVals = AsmValues(Processor.filters)

        numLines = 0

        file = open(fileName, 'r')
        for line in file.readlines():
            if line == '\n':
                continue

            parsedLine = Processor.parseLine(line.lower())
            opCode = parsedLine[0]

            asmVals.countOpFreq(opCode)
            asmVals.countControl(opCode)
            asmVals.procCounter(line)
            asmVals.countNumOperands(parsedLine)
            asmVals.countLine()

            if parsedLine[2]:
                asmVals.countOperandTypes(parsedLine)

            numLines += 1
        file.close()
        
        values = asmVals.getValues()
        return values

    def parseLine(line):
        groups = re.match("(\\S+)( ([^,\n]*([^, \n])))? ?(, (\\S+))?", line).groups()
        return [groups[0], groups[2], groups[5]]

    
    def writeHeader(file, values):#outputFile should be an opened filestream
        for key in values['freq'].keys():
            file.write(f'{key} ')
        file.write("immediate register directAddress indirectAddress identifier ")
        file.write("noOperands oneOperand twoOperands ")
        file.write("procPercent procAverage procSTD ")
        file.write("totalInstruct percentControlFlowInstruct\n")

    def writeToFile(inputFile, outputFile):
        values = Processor.count_file(inputFile)
        file = open(outputFile, 'w')

        Processor.writeHeader(file, values)

        totalLines = values['totalLines']
        for freq in values['freq'].values():
            file.write(f'{freq/totalLines} ')

        totalDoubleOp = values['numOperands'][2]#number of instructions with 2 operands
        for num in values['operandTypeCount']:
            file.write(f'{num/totalDoubleOp} ')

        for num in values['numOperands']:
            file.write(f'{num/totalLines} ')

        procStats = values['procStats']
        file.write(f"{procStats[0]/totalLines} ")
        file.write(f'{procStats[1]} ')
        file.write(f'{procStats[2]} ')

        file.write(f'{totalLines} ')
        file.write(f'{values["controlFlowCount"]/totalLines} ')

        file.close()

